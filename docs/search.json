[
  {
    "objectID": "tidyverse_basics.html",
    "href": "tidyverse_basics.html",
    "title": "tidyverse_basics",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\nTo get the file located at myfolder/MyData.csv from the working directory myfolder/homework/, the relative path would be ../MyData.csv.\nWhat are the major benefits of using R projects?\nOrganization: Keeps all files related to a project in one place. \n\nPortability: Makes it easy to share projects with others, maintaining the same structure.\n\nConsistency: Helps manage working directories and paths.  \n\nVersion Control: Integrates well with Git.\nWhat is git and what is github?\nGit: Git is a version control system that allows multiple people to work on the same codebase. It tracks changes, manages versions, and helps in collaborative work. \n\nGitHub: GitHub is a web platform that uses Git for version control. It provides a UI for managing Git repositories,  issue tracking, and other features for software development.\nWhat are the two main differences between a tibble and a data.frame?\nPrinting: Tibbles have a more user-friendly print method. They show only the first 10 rows and as many columns as fit on the screen. \n\nColumn Types: Tibbles are stricter about column types, not converting strings to factors by default. They also throw an error if column names are not valid.\nRewrite the following nested function call using baseR’s chaining operator:\nlibrary(tidyverse)\n\nresult &lt;- as_tibble(iris) %&gt;%\n  select(starts_with(\"Petal\"), Species) %&gt;%\n  filter(Petal.Length &lt; 1.55) %&gt;%\n  arrange(Species)\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\nLong Format Data: This format has one row per observation per variable. Each row is an observation, and columns include n variables. \n\nWide Format Data: This format has one row per subject with each variable as a separate column.\n\nPreference: Long format is generally preferred for statistical analysis. Many statistical librarier in R have functions that are designed to work with long format data."
  },
  {
    "objectID": "tidyverse_basics.html#task-1",
    "href": "tidyverse_basics.html#task-1",
    "title": "tidyverse_basics",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\nTo get the file located at myfolder/MyData.csv from the working directory myfolder/homework/, the relative path would be ../MyData.csv.\nWhat are the major benefits of using R projects?\nOrganization: Keeps all files related to a project in one place. \n\nPortability: Makes it easy to share projects with others, maintaining the same structure.\n\nConsistency: Helps manage working directories and paths.  \n\nVersion Control: Integrates well with Git.\nWhat is git and what is github?\nGit: Git is a version control system that allows multiple people to work on the same codebase. It tracks changes, manages versions, and helps in collaborative work. \n\nGitHub: GitHub is a web platform that uses Git for version control. It provides a UI for managing Git repositories,  issue tracking, and other features for software development.\nWhat are the two main differences between a tibble and a data.frame?\nPrinting: Tibbles have a more user-friendly print method. They show only the first 10 rows and as many columns as fit on the screen. \n\nColumn Types: Tibbles are stricter about column types, not converting strings to factors by default. They also throw an error if column names are not valid.\nRewrite the following nested function call using baseR’s chaining operator:\nlibrary(tidyverse)\n\nresult &lt;- as_tibble(iris) %&gt;%\n  select(starts_with(\"Petal\"), Species) %&gt;%\n  filter(Petal.Length &lt; 1.55) %&gt;%\n  arrange(Species)\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\nLong Format Data: This format has one row per observation per variable. Each row is an observation, and columns include n variables. \n\nWide Format Data: This format has one row per subject with each variable as a separate column.\n\nPreference: Long format is generally preferred for statistical analysis. Many statistical librarier in R have functions that are designed to work with long format data."
  },
  {
    "objectID": "tidyverse_basics.html#task-2",
    "href": "tidyverse_basics.html#task-2",
    "title": "tidyverse_basics",
    "section": "Task 2",
    "text": "Task 2\n\nGlass data:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Read the data into R \nglass_data_url &lt;- \"https://www4.stat.ncsu.edu/~online/datasets/glass.data\"\nglass_col_names &lt;- c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type_of_glass\")\n\nglass_data &lt;- read_csv(glass_data_url, col_names = FALSE) %&gt;%\n  set_names(glass_col_names)\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Print out the tibble\nglass_data\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n# Process the Type_of_glass variable and filter observations\nglass_data_processed &lt;- glass_data %&gt;%\n  mutate(Type_of_glass = case_when(\n    Type_of_glass == 1 ~ \"building_windows_float_processed\",\n    Type_of_glass == 2 ~ \"building_windows_non_float_processed\",\n    Type_of_glass == 3 ~ \"vehicle_windows_float_processed\",\n    Type_of_glass == 4 ~ \"vehicle_windows_non_float_processed\",\n    Type_of_glass == 5 ~ \"containers\",\n    Type_of_glass == 6 ~ \"tableware\",\n    Type_of_glass == 7 ~ \"headlamp\",\n    TRUE ~ as.character(Type_of_glass)\n  )) %&gt;%\n  filter(Fe &lt; 0.2, Type_of_glass %in% c(\"tableware\", \"headlamp\"))\n\n# Print out the processed tibble\nglass_data_processed\n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamp     \n# ℹ 28 more rows\n\n\n\n\nYeast Data:\n\nlibrary(tidyverse)\n\n# Read the data\nyeast_data_url &lt;- \"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\"\nyeast_col_names &lt;- c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\")\n\nyeast_data &lt;- read_delim(yeast_data_url, delim = \"  \", col_names = FALSE, trim_ws = TRUE) %&gt;%\n  set_names(yeast_col_names)\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"  \"\nchr (2): X1, X10\ndbl (8): X2, X3, X4, X5, X6, X7, X8, X9\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Print out the tibble\nprint(yeast_data)\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n# Process the data by removing seq_name and nuc columns and adding mean and median columns for each class\nyeast_data_processed &lt;- yeast_data %&gt;%\n  select(-seq_name, -nuc) %&gt;%\n  group_by(class) %&gt;%\n  summarise(across(c(mcg:vac), list(mean = ~mean(.x, na.rm = TRUE), median = ~median(.x, na.rm = TRUE)), .names = \"{.fn}_{col}\"))\n\n# Print out the processed tibble\nprint(yeast_data_processed)\n\n# A tibble: 44 × 15\n   class    mean_mcg median_mcg mean_gvh median_gvh mean_alm median_alm mean_mit\n   &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.22  C…      NaN         NA    0.496      0.505    0.500      0.47     0.536\n 2 0.22  E…      NaN         NA    0.7        0.7      0.84       0.84     0.49 \n 3 0.22  M…      NaN         NA    0.79       0.79     0.57       0.57     0.41 \n 4 0.22  M…      NaN         NA    0.41       0.41     0.53       0.53     0.465\n 5 0.22  M…      NaN         NA    0.536      0.52     0.572      0.56     0.472\n 6 0.22  N…      NaN         NA    0.42       0.42     0.31       0.31     0.5  \n 7 0.22  P…      NaN         NA    0.46       0.46     0.37       0.37     0.48 \n 8 0.25  M…      NaN         NA    0.47       0.47     0.41       0.41     0.53 \n 9 0.25  N…      NaN         NA    0.4        0.4      0.335      0.335    0.595\n10 0.26  C…      NaN         NA    0.5        0.5      0.46       0.46     0.52 \n# ℹ 34 more rows\n# ℹ 7 more variables: median_mit &lt;dbl&gt;, mean_erl &lt;dbl&gt;, median_erl &lt;dbl&gt;,\n#   mean_pox &lt;dbl&gt;, median_pox &lt;dbl&gt;, mean_vac &lt;dbl&gt;, median_vac &lt;dbl&gt;"
  },
  {
    "objectID": "tidyverse_basics.html#task-2-combining-excel-and-delimited-data",
    "href": "tidyverse_basics.html#task-2-combining-excel-and-delimited-data",
    "title": "tidyverse_basics",
    "section": "** Task 2: Combining Excel and Delimited Data**",
    "text": "** Task 2: Combining Excel and Delimited Data**\n\nlibrary(tidyverse)\nlibrary(readxl)\n\n# Step 1: Import the white wine data from the first sheet\nwhite_wine_path &lt;- \"./white-wine.xlsx\"\nwhite_wine &lt;- read_excel(white_wine_path, sheet = 1)\n\n# Print out the tibble\nprint(white_wine)\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n# Step 2: Import the variable names from the second sheet and rename the columns\nwhite_wine_colnames &lt;- read_excel(white_wine_path, sheet = 2) %&gt;% pull()\ncolnames(white_wine) &lt;- white_wine_colnames\n\n# Step 3: Add a column to indicate the wines are white\nwhite_wine &lt;- white_wine %&gt;%\n  mutate(type = \"white\")\n\n# Step 4: Import the red wine data from the CSV file with correct delimiter and column types\nred_wine_path &lt;- \"./red-wine.csv\"\nred_wine &lt;- read_delim(red_wine_path, delim = \";\", col_types = cols(\n  `fixed acidity` = col_double(),\n  `volatile acidity` = col_double(),\n  `citric acid` = col_double(),\n  `residual sugar` = col_double(),\n  chlorides = col_double(),\n  `free sulfur dioxide` = col_double(),\n  `total sulfur dioxide` = col_double(),\n  density = col_double(),\n  pH = col_double(),\n  sulphates = col_double(),\n  alcohol = col_double(),\n  quality = col_integer()\n))\n\n# Replace the variable names as done above\ncolnames(red_wine) &lt;- white_wine_colnames\n\n# Add a column to indicate the wines are red\nred_wine &lt;- red_wine %&gt;%\n  mutate(type = \"red\")\n\n# Step 5: Combine the two data sets into one\nwine_data &lt;- bind_rows(white_wine, red_wine)\n\n# Step 6: Filter the data to only look at high-quality wines and wines with a reasonable alcohol value\nhigh_quality_wine &lt;- wine_data %&gt;%\n  filter(quality &gt; 6.5, alcohol &lt; 132)\n\n# Step 7: Sort the data from highest quality to lowest\nsorted_wine &lt;- high_quality_wine %&gt;%\n  arrange(desc(quality))\n\n# Step 8: Select only the variables that contain acid, the alcohol variable, the type variable, and the quality variable\nselected_wine &lt;- sorted_wine %&gt;%\n  select(contains(\"acid\"), alcohol, type, quality)\n\n# Step 9: Add the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable\nfinal_wine &lt;- selected_wine %&gt;%\n  group_by(quality) %&gt;%\n  mutate(mean_alcohol = mean(alcohol, na.rm = TRUE),\n         sd_alcohol = sd(alcohol, na.rm = TRUE))\n\n# Print out the final tibble\nprint(final_wine)\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality mean_alcohol\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n 1            91             0.27        0.45     104 white       9        122. \n 2            66             0.36        0.29     124 white       9        122. \n 3            74             0.24        0.36     125 white       9        122. \n 4            69             0.36        0.34     127 white       9        122. \n 5            71             0.26        0.49     129 white       9        122. \n 6            62             0.66        0.48     128 white       8         94.1\n 7            62             0.66        0.48     128 white       8         94.1\n 8            68             0.26        0.42     105 white       8         94.1\n 9            67             0.23        0.31     107 white       8         94.1\n10            67             0.23        0.31     107 white       8         94.1\n# ℹ 1,196 more rows\n# ℹ 1 more variable: sd_alcohol &lt;dbl&gt;"
  }
]